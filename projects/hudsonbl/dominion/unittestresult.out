Testing drawCard.
RANDOM TESTS.
ALL TESTS OK
File 'dominion.c'
Lines executed:7.28% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
     5995:    9:int compare(const void* a, const void* b) {
     5995:   10:	if (*(int*)a > *(int*)b)
     3041:   11:		return 1;
     2954:   12:	if (*(int*)a < *(int*)b)
     2954:   13:		return -1;
    #####:   14:	return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:	int k8, int k9, int k10) {
    #####:   24:	int* k = malloc(10 * sizeof(int));
    #####:   25:	k[0] = k1;
    #####:   26:	k[1] = k2;
    #####:   27:	k[2] = k3;
    #####:   28:	k[3] = k4;
    #####:   29:	k[4] = k5;
    #####:   30:	k[5] = k6;
    #####:   31:	k[6] = k7;
    #####:   32:	k[7] = k8;
    #####:   33:	k[8] = k9;
    #####:   34:	k[9] = k10;
    #####:   35:	return k;
        -:   36:}
        -:   37:
    #####:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:	struct gameState *state) {
        -:   40:
        -:   41:	int i;
        -:   42:	int j;
        -:   43:	int it;
        -:   44:	//set up random number generator
    #####:   45:	SelectStream(1);
    #####:   46:	PutSeed((long)randomSeed);
        -:   47:
        -:   48:	//check number of players
    #####:   49:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:	{
    #####:   51:		return -1;
        -:   52:	}
        -:   53:
        -:   54:	//set number of players
    #####:   55:	state->numPlayers = numPlayers;
        -:   56:
        -:   57:	//check selected kingdom cards are different
    #####:   58:	for (i = 0; i < 10; i++)
        -:   59:	{
    #####:   60:		for (j = 0; j < 10; j++)
        -:   61:		{
    #####:   62:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:			{
    #####:   64:				return -1;
        -:   65:			}
        -:   66:		}
        -:   67:	}
        -:   68:
        -:   69:
        -:   70:	//initialize supply
        -:   71:	///////////////////////////////
        -:   72:
        -:   73:	//set number of Curse cards
    #####:   74:	if (numPlayers == 2)
        -:   75:	{
    #####:   76:		state->supplyCount[curse] = 10;
        -:   77:	}
    #####:   78:	else if (numPlayers == 3)
        -:   79:	{
    #####:   80:		state->supplyCount[curse] = 20;
        -:   81:	}
        -:   82:	else
        -:   83:	{
    #####:   84:		state->supplyCount[curse] = 30;
        -:   85:	}
        -:   86:
        -:   87:	//set number of Victory cards
    #####:   88:	if (numPlayers == 2)
        -:   89:	{
    #####:   90:		state->supplyCount[estate] = 8;
    #####:   91:		state->supplyCount[duchy] = 8;
    #####:   92:		state->supplyCount[province] = 8;
        -:   93:	}
        -:   94:	else
        -:   95:	{
    #####:   96:		state->supplyCount[estate] = 12;
    #####:   97:		state->supplyCount[duchy] = 12;
    #####:   98:		state->supplyCount[province] = 12;
        -:   99:	}
        -:  100:
        -:  101:	//set number of Treasure cards
    #####:  102:	state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  103:	state->supplyCount[silver] = 40;
    #####:  104:	state->supplyCount[gold] = 30;
        -:  105:
        -:  106:	//set number of Kingdom cards
    #####:  107:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:	{
    #####:  109:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:		{
    #####:  111:			if (kingdomCards[j] == i)
        -:  112:			{
        -:  113:				//check if card is a 'Victory' Kingdom card
    #####:  114:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:				{
    #####:  116:					if (numPlayers == 2) {
    #####:  117:						state->supplyCount[i] = 8;
        -:  118:					}
    #####:  119:					else { state->supplyCount[i] = 12; }
        -:  120:				}
        -:  121:				else
        -:  122:				{
    #####:  123:					state->supplyCount[i] = 10;
        -:  124:				}
    #####:  125:				break;
        -:  126:			}
        -:  127:			else    //card is not in the set choosen for the game
        -:  128:			{
    #####:  129:				state->supplyCount[i] = -1;
        -:  130:			}
        -:  131:		}
        -:  132:
        -:  133:	}
        -:  134:
        -:  135:	////////////////////////
        -:  136:	//supply intilization complete
        -:  137:
        -:  138:	//set player decks
    #####:  139:	for (i = 0; i < numPlayers; i++)
        -:  140:	{
    #####:  141:		state->deckCount[i] = 0;
    #####:  142:		for (j = 0; j < 3; j++)
        -:  143:		{
    #####:  144:			state->deck[i][j] = estate;
    #####:  145:			state->deckCount[i]++;
        -:  146:		}
    #####:  147:		for (j = 3; j < 10; j++)
        -:  148:		{
    #####:  149:			state->deck[i][j] = copper;
    #####:  150:			state->deckCount[i]++;
        -:  151:		}
        -:  152:	}
        -:  153:
        -:  154:	//shuffle player decks
    #####:  155:	for (i = 0; i < numPlayers; i++)
        -:  156:	{
    #####:  157:		if (shuffle(i, state) < 0)
        -:  158:		{
    #####:  159:			return -1;
        -:  160:		}
        -:  161:	}
        -:  162:
        -:  163:	//draw player hands
    #####:  164:	for (i = 0; i < numPlayers; i++)
        -:  165:	{
        -:  166:		//initialize hand size to zero
    #####:  167:		state->handCount[i] = 0;
    #####:  168:		state->discardCount[i] = 0;
        -:  169:		//draw 5 cards
        -:  170:		// for (j = 0; j < 5; j++)
        -:  171:		//	{
        -:  172:		//	  drawCard(i, state);
        -:  173:		//	}
        -:  174:	}
        -:  175:
        -:  176:	//set embargo tokens to 0 for all supply piles
    #####:  177:	for (i = 0; i <= treasure_map; i++)
        -:  178:	{
    #####:  179:		state->embargoTokens[i] = 0;
        -:  180:	}
        -:  181:
        -:  182:	//initialize first player's turn
    #####:  183:	state->outpostPlayed = 0;
    #####:  184:	state->phase = 0;
    #####:  185:	state->numActions = 1;
    #####:  186:	state->numBuys = 1;
    #####:  187:	state->playedCardCount = 0;
    #####:  188:	state->whoseTurn = 0;
    #####:  189:	state->handCount[state->whoseTurn] = 0;
        -:  190:	//int it; move to top
        -:  191:
        -:  192:	//Moved draw cards to here, only drawing at the start of a turn
    #####:  193:	for (it = 0; it < 5; it++) {
    #####:  194:		drawCard(state->whoseTurn, state);
        -:  195:	}
        -:  196:
    #####:  197:	updateCoins(state->whoseTurn, state, 0);
        -:  198:
    #####:  199:	return 0;
        -:  200:}
        -:  201:
        2:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:
        -:  205:	int newDeck[MAX_DECK];
        2:  206:	int newDeckPos = 0;
        -:  207:	int card;
        -:  208:	int i;
        -:  209:
        2:  210:	if (state->deckCount[player] < 1)
    #####:  211:		return -1;
        2:  212:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  213:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
      813:  215:	while (state->deckCount[player] > 0) {
      809:  216:		card = floor(Random() * state->deckCount[player]);
      809:  217:		newDeck[newDeckPos] = state->deck[player][card];
      809:  218:		newDeckPos++;
    81722:  219:		for (i = card; i < state->deckCount[player] - 1; i++) {
    80913:  220:			state->deck[player][i] = state->deck[player][i + 1];
        -:  221:		}
      809:  222:		state->deckCount[player]--;
        -:  223:	}
      811:  224:	for (i = 0; i < newDeckPos; i++) {
      809:  225:		state->deck[player][i] = newDeck[i];
      809:  226:		state->deckCount[player]++;
        -:  227:	}
        -:  228:
        2:  229:	return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  233:{
        -:  234:	int card;
    #####:  235:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:								//check if it is the right phase
    #####:  238:	if (state->phase != 0)
        -:  239:	{
    #####:  240:		return -1;
        -:  241:	}
        -:  242:
        -:  243:	//check if player has enough actions
    #####:  244:	if (state->numActions < 1)
        -:  245:	{
    #####:  246:		return -1;
        -:  247:	}
        -:  248:
        -:  249:	//get card played
    #####:  250:	card = handCard(handPos, state);
        -:  251:
        -:  252:	//check if selected card is an action
    #####:  253:	if (card < adventurer || card > treasure_map)
        -:  254:	{
    #####:  255:		return -1;
        -:  256:	}
        -:  257:
        -:  258:	//play card
    #####:  259:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  260:	{
    #####:  261:		return -1;
        -:  262:	}
        -:  263:
        -:  264:	//reduce number of actions
    #####:  265:	state->numActions--;
        -:  266:
        -:  267:	//update coins (Treasure cards may be added with card draws)
    #####:  268:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:
    #####:  270:	return 0;
        -:  271:}
        -:  272:
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:	int who;
        -:  275:	if (DEBUG) {
        -:  276:		printf("Entering buyCard...\n");
        -:  277:	}
        -:  278:
        -:  279:	// I don't know what to do about the phase thing.
        -:  280:
    #####:  281:	who = state->whoseTurn;
        -:  282:
    #####:  283:	if (state->numBuys < 1) {
        -:  284:		if (DEBUG)
        -:  285:			printf("You do not have any buys left\n");
    #####:  286:		return -1;
        -:  287:	}
    #####:  288:	else if (supplyCount(supplyPos, state) <1) {
        -:  289:		if (DEBUG)
        -:  290:			printf("There are not any of that type of card left\n");
    #####:  291:		return -1;
        -:  292:	}
    #####:  293:	else if (state->coins < getCost(supplyPos)) {
        -:  294:		if (DEBUG)
        -:  295:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:		return -1;
        -:  297:	}
        -:  298:	else {
    #####:  299:		state->phase = 1;
        -:  300:		//state->supplyCount[supplyPos]--;
    #####:  301:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  302:
    #####:  303:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  304:		state->numBuys--;
        -:  305:		if (DEBUG)
        -:  306:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:	}
        -:  308:
        -:  309:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:	//state->discardCount[who]++;
        -:  311:
    #####:  312:	return 0;
        -:  313:}
        -:  314:
    #####:  315:int numHandCards(struct gameState *state) {
    #####:  316:	return state->handCount[whoseTurn(state)];
        -:  317:}
        -:  318:
    #####:  319:int handCard(int handPos, struct gameState *state) {
    #####:  320:	int currentPlayer = whoseTurn(state);
    #####:  321:	return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
    #####:  324:int supplyCount(int card, struct gameState *state) {
    #####:  325:	return state->supplyCount[card];
        -:  326:}
        -:  327:
    #####:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:	int i;
    #####:  330:	int count = 0;
        -:  331:
    #####:  332:	for (i = 0; i < state->deckCount[player]; i++)
        -:  333:	{
    #####:  334:		if (state->deck[player][i] == card) count++;
        -:  335:	}
        -:  336:
    #####:  337:	for (i = 0; i < state->handCount[player]; i++)
        -:  338:	{
    #####:  339:		if (state->hand[player][i] == card) count++;
        -:  340:	}
        -:  341:
    #####:  342:	for (i = 0; i < state->discardCount[player]; i++)
        -:  343:	{
    #####:  344:		if (state->discard[player][i] == card) count++;
        -:  345:	}
        -:  346:
    #####:  347:	return count;
        -:  348:}
        -:  349:
    #####:  350:int whoseTurn(struct gameState *state) {
    #####:  351:	return state->whoseTurn;
        -:  352:}
        -:  353:
    #####:  354:int endTurn(struct gameState *state) {
        -:  355:	int k;
        -:  356:	int i;
    #####:  357:	int currentPlayer = whoseTurn(state);
        -:  358:
        -:  359:	//Discard hand
    #####:  360:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  361:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  362:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:	}
    #####:  364:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:
        -:  366:										//Code for determining the player
    #####:  367:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  368:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:	}
        -:  370:	else {
    #####:  371:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:	}
        -:  373:
    #####:  374:	state->outpostPlayed = 0;
    #####:  375:	state->phase = 0;
    #####:  376:	state->numActions = 1;
    #####:  377:	state->coins = 0;
    #####:  378:	state->numBuys = 1;
    #####:  379:	state->playedCardCount = 0;
    #####:  380:	state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:	//int k; move to top
        -:  383:	//Next player draws hand
    #####:  384:	for (k = 0; k < 5; k++) {
    #####:  385:		drawCard(state->whoseTurn, state);//Draw a card
        -:  386:	}
        -:  387:
        -:  388:	//Update money
    #####:  389:	updateCoins(state->whoseTurn, state, 0);
        -:  390:
    #####:  391:	return 0;
        -:  392:}
        -:  393:
    #####:  394:int isGameOver(struct gameState *state) {
        -:  395:	int i;
        -:  396:	int j;
        -:  397:
        -:  398:	//if stack of Province cards is empty, the game ends
    #####:  399:	if (state->supplyCount[province] == 0)
        -:  400:	{
    #####:  401:		return 1;
        -:  402:	}
        -:  403:
        -:  404:	//if three supply pile are at 0, the game ends
    #####:  405:	j = 0;
    #####:  406:	for (i = 0; i < 25; i++)
        -:  407:	{
    #####:  408:		if (state->supplyCount[i] == 0)
        -:  409:		{
    #####:  410:			j++;
        -:  411:		}
        -:  412:	}
    #####:  413:	if (j >= 3)
        -:  414:	{
    #####:  415:		return 1;
        -:  416:	}
        -:  417:
    #####:  418:	return 0;
        -:  419:}
        -:  420:
    #####:  421:int scoreFor(int player, struct gameState *state) {
        -:  422:
        -:  423:	int i;
    #####:  424:	int score = 0;
        -:  425:	//score from hand
    #####:  426:	for (i = 0; i < state->handCount[player]; i++)
        -:  427:	{
    #####:  428:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  429:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  430:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  431:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  432:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  433:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  434:	}
        -:  435:
        -:  436:	//score from discard
    #####:  437:	for (i = 0; i < state->discardCount[player]; i++)
        -:  438:	{
    #####:  439:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  440:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  441:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  442:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  443:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  444:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  445:	}
        -:  446:
        -:  447:	//score from deck
    #####:  448:	for (i = 0; i < state->discardCount[player]; i++)
        -:  449:	{
    #####:  450:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  451:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  452:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  453:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  454:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  455:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  456:	}
        -:  457:
    #####:  458:	return score;
        -:  459:}
        -:  460:
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:	int i;
        -:  463:	int j;
        -:  464:	int highScore;
        -:  465:	int currentPlayer;
        -:  466:
        -:  467:	//get score for each player
    #####:  468:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  469:	{
        -:  470:		//set unused player scores to -9999
    #####:  471:		if (i >= state->numPlayers)
        -:  472:		{
    #####:  473:			players[i] = -9999;
        -:  474:		}
        -:  475:		else
        -:  476:		{
    #####:  477:			players[i] = scoreFor(i, state);
        -:  478:		}
        -:  479:	}
        -:  480:
        -:  481:	//find highest score
    #####:  482:	j = 0;
    #####:  483:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  484:	{
    #####:  485:		if (players[i] > players[j])
        -:  486:		{
    #####:  487:			j = i;
        -:  488:		}
        -:  489:	}
    #####:  490:	highScore = players[j];
        -:  491:
        -:  492:	//add 1 to players who had less turns
    #####:  493:	currentPlayer = whoseTurn(state);
    #####:  494:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  495:	{
    #####:  496:		if (players[i] == highScore && i > currentPlayer)
        -:  497:		{
    #####:  498:			players[i]++;
        -:  499:		}
        -:  500:	}
        -:  501:
        -:  502:	//find new highest score
    #####:  503:	j = 0;
    #####:  504:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:	{
    #####:  506:		if (players[i] > players[j])
        -:  507:		{
    #####:  508:			j = i;
        -:  509:		}
        -:  510:	}
    #####:  511:	highScore = players[j];
        -:  512:
        -:  513:	//set winners in array to 1 and rest to 0
    #####:  514:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:	{
    #####:  516:		if (players[i] == highScore)
        -:  517:		{
    #####:  518:			players[i] = 1;
        -:  519:		}
        -:  520:		else
        -:  521:		{
    #####:  522:			players[i] = 0;
        -:  523:		}
        -:  524:	}
        -:  525:
    #####:  526:	return 0;
        -:  527:}
        -:  528:
     2000:  529:int drawCard(int player, struct gameState *state)
        -:  530:{
        -:  531:	int count;
        -:  532:	int deckCounter;
     2000:  533:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  534:
        -:  535:										//Step 1 Shuffle the discard pile back into a deck
        -:  536:		int i;
        -:  537:		//Move discard to deck
      811:  538:		for (i = 0; i < state->discardCount[player]; i++) {
      809:  539:			state->deck[player][i] = state->discard[player][i];
      809:  540:			state->discard[player][i] = -1;
        -:  541:		}
        -:  542:
        2:  543:		state->deckCount[player] = state->discardCount[player];
        2:  544:		state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:										//Shufffle the deck
        2:  547:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  548:
        -:  549:		if (DEBUG) {//Debug statements
        -:  550:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:		}
        -:  552:
        2:  553:		state->discardCount[player] = 0;
        -:  554:
        -:  555:		//Step 2 Draw Card
        2:  556:		count = state->handCount[player];//Get current player's hand count
        -:  557:
        -:  558:		if (DEBUG) {//Debug statements
        -:  559:			printf("Current hand count: %d\n", count);
        -:  560:		}
        -:  561:
        2:  562:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
        2:  564:		if (deckCounter == 0)
    #####:  565:			return -1;
        -:  566:
        2:  567:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  568:		state->deckCount[player]--;
        2:  569:		state->handCount[player]++;//Increment hand count
        -:  570:	}
        -:  571:
        -:  572:	else {
     1998:  573:		int count = state->handCount[player];//Get current hand count for player
        -:  574:		int deckCounter;
        -:  575:		if (DEBUG) {//Debug statements
        -:  576:			printf("Current hand count: %d\n", count);
        -:  577:		}
        -:  578:
     1998:  579:		deckCounter = state->deckCount[player];//Create holder for the deck count
     1998:  580:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1998:  581:		state->deckCount[player]--;
     1998:  582:		state->handCount[player]++;//Increment hand count
        -:  583:	}
        -:  584:
     2000:  585:	return 0;
        -:  586:}
        -:  587:
    #####:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:	switch (cardNumber)
        -:  591:	{
        -:  592:	case curse:
    #####:  593:		return 0;
        -:  594:	case estate:
    #####:  595:		return 2;
        -:  596:	case duchy:
    #####:  597:		return 5;
        -:  598:	case province:
    #####:  599:		return 8;
        -:  600:	case copper:
    #####:  601:		return 0;
        -:  602:	case silver:
    #####:  603:		return 3;
        -:  604:	case gold:
    #####:  605:		return 6;
        -:  606:	case adventurer:
    #####:  607:		return 6;
        -:  608:	case council_room:
    #####:  609:		return 5;
        -:  610:	case feast:
    #####:  611:		return 4;
        -:  612:	case gardens:
    #####:  613:		return 4;
        -:  614:	case mine:
    #####:  615:		return 5;
        -:  616:	case remodel:
    #####:  617:		return 4;
        -:  618:	case smithy:
    #####:  619:		return 4;
        -:  620:	case village:
    #####:  621:		return 3;
        -:  622:	case baron:
    #####:  623:		return 4;
        -:  624:	case great_hall:
    #####:  625:		return 3;
        -:  626:	case minion:
    #####:  627:		return 5;
        -:  628:	case steward:
    #####:  629:		return 3;
        -:  630:	case tribute:
    #####:  631:		return 5;
        -:  632:	case ambassador:
    #####:  633:		return 3;
        -:  634:	case cutpurse:
    #####:  635:		return 4;
        -:  636:	case embargo:
    #####:  637:		return 2;
        -:  638:	case outpost:
    #####:  639:		return 5;
        -:  640:	case salvager:
    #####:  641:		return 4;
        -:  642:	case sea_hag:
    #####:  643:		return 4;
        -:  644:	case treasure_map:
    #####:  645:		return 4;
        -:  646:	}
        -:  647:
    #####:  648:	return -1;
        -:  649:}
        -:  650:
    #####:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:	int i;
        -:  654:	int j;
        -:  655:	int k;
        -:  656:	int x;
        -:  657:	int index;
    #####:  658:	int currentPlayer = whoseTurn(state);
    #####:  659:	int nextPlayer = currentPlayer + 1;
        -:  660:
    #####:  661:	int tributeRevealedCards[2] = { -1, -1 };
        -:  662:	int temphand[MAX_HAND];// moved above the if statement
    #####:  663:	int drawntreasure = 0;
        -:  664:	int cardDrawn;
    #####:  665:	int z = 0;// this is the counter for the temp hand
    #####:  666:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  667:		nextPlayer = 0;
        -:  668:	}
        -:  669:
        -:  670:
        -:  671:	//uses switch to select card and perform actions
    #####:  672:	switch (card)
        -:  673:	{
        -:  674:	case adventurer:
    #####:  675:		caseAdventurer(drawntreasure, state, currentPlayer, temphand, z);
    #####:  676:		return 0;
        -:  677:
        -:  678:	case council_room:
        -:  679:
    #####:  680:		caseCouncilRoom(currentPlayer, state, handPos);
        -:  681:
        -:  682:
    #####:  683:		return 0;
        -:  684:
        -:  685:	case feast:
        -:  686:		//gain card with cost up to 5
        -:  687:		//Backup hand
    #####:  688:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  689:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  690:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  691:		}
        -:  692:		//Backup hand
        -:  693:
        -:  694:		//Update Coins for Buy
    #####:  695:		updateCoins(currentPlayer, state, 5);
    #####:  696:		x = 1;//Condition to loop on
    #####:  697:		while (x == 1) {//Buy one card
    #####:  698:			if (supplyCount(choice1, state) <= 0) {
        -:  699:				if (DEBUG)
        -:  700:					printf("None of that card left, sorry!\n");
        -:  701:
        -:  702:				if (DEBUG) {
        -:  703:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  704:				}
        -:  705:			}
    #####:  706:			else if (state->coins < getCost(choice1)) {
    #####:  707:				printf("That card is too expensive!\n");
        -:  708:
        -:  709:				if (DEBUG) {
        -:  710:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  711:				}
        -:  712:			}
        -:  713:			else {
        -:  714:
        -:  715:				if (DEBUG) {
        -:  716:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:				}
        -:  718:
    #####:  719:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  720:				x = 0;//No more buying cards
        -:  721:
        -:  722:				if (DEBUG) {
        -:  723:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  724:				}
        -:  725:
        -:  726:			}
        -:  727:		}
        -:  728:
        -:  729:		//Reset Hand
    #####:  730:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  731:			state->hand[currentPlayer][i] = temphand[i];
    #####:  732:			temphand[i] = -1;
        -:  733:		}
        -:  734:		//Reset Hand
        -:  735:
    #####:  736:		return 0;
        -:  737:
        -:  738:	case gardens:
    #####:  739:		return -1;
        -:  740:
        -:  741:	case mine:
    #####:  742:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  743:
    #####:  744:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  745:		{
    #####:  746:			return -1;
        -:  747:		}
        -:  748:
    #####:  749:		if (choice2 > treasure_map || choice2 < curse)
        -:  750:		{
    #####:  751:			return -1;
        -:  752:		}
        -:  753:
    #####:  754:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  755:		{
    #####:  756:			return -1;
        -:  757:		}
        -:  758:
    #####:  759:		gainCard(choice2, state, 2, currentPlayer);
        -:  760:
        -:  761:		//discard card from hand
    #####:  762:		discardCard(handPos, currentPlayer, state, 0);
        -:  763:
        -:  764:		//discard trashed card
    #####:  765:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  766:		{
    #####:  767:			if (state->hand[currentPlayer][i] == j)
        -:  768:			{
    #####:  769:				discardCard(i, currentPlayer, state, 0);
    #####:  770:				break;
        -:  771:			}
        -:  772:		}
        -:  773:
    #####:  774:		return 0;
        -:  775:
        -:  776:	case remodel:
    #####:  777:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  778:
    #####:  779:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  780:		{
    #####:  781:			return -1;
        -:  782:		}
        -:  783:
    #####:  784:		gainCard(choice2, state, 0, currentPlayer);
        -:  785:
        -:  786:		//discard card from hand
    #####:  787:		discardCard(handPos, currentPlayer, state, 0);
        -:  788:
        -:  789:		//discard trashed card
    #####:  790:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  791:		{
    #####:  792:			if (state->hand[currentPlayer][i] == j)
        -:  793:			{
    #####:  794:				discardCard(i, currentPlayer, state, 0);
    #####:  795:				break;
        -:  796:			}
        -:  797:		}
        -:  798:
        -:  799:
    #####:  800:		return 0;
        -:  801:
        -:  802:	case smithy:
        -:  803:		//+3 Cards
    #####:  804:		caseSmithy(currentPlayer, handPos, state);
        -:  805:
    #####:  806:		return 0;
        -:  807:
        -:  808:	case village:
    #####:  809:		caseVillage(currentPlayer, state, handPos);
        -:  810:
    #####:  811:		return 0;
        -:  812:
        -:  813:	case baron:
    #####:  814:		state->numBuys++;//Increase buys by 1!
    #####:  815:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####:  816:			int p = 0;//Iterator for hand!
    #####:  817:			int card_not_discarded = 1;//Flag for discard set!
    #####:  818:			while (card_not_discarded) {
    #####:  819:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####:  820:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  821:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  822:					state->discardCount[currentPlayer]++;
    #####:  823:					for (; p < state->handCount[currentPlayer]; p++) {
    #####:  824:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  825:					}
    #####:  826:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  827:					state->handCount[currentPlayer]--;
    #####:  828:					card_not_discarded = 0;//Exit the loop
        -:  829:				}
    #####:  830:				else if (p > state->handCount[currentPlayer]) {
        -:  831:					if (DEBUG) {
        -:  832:						printf("No estate cards in your hand, invalid choice\n");
        -:  833:						printf("Must gain an estate if there are any\n");
        -:  834:					}
    #####:  835:					if (supplyCount(estate, state) > 0) {
    #####:  836:						gainCard(estate, state, 0, currentPlayer);
    #####:  837:						state->supplyCount[estate]--;//Decrement estates
    #####:  838:						if (supplyCount(estate, state) == 0) {
    #####:  839:							isGameOver(state);
        -:  840:						}
        -:  841:					}
    #####:  842:					card_not_discarded = 0;//Exit the loop
        -:  843:				}
        -:  844:
        -:  845:				else {
    #####:  846:					p++;//Next card
        -:  847:				}
        -:  848:			}
        -:  849:		}
        -:  850:
        -:  851:		else {
    #####:  852:			if (supplyCount(estate, state) > 0) {
    #####:  853:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  854:				state->supplyCount[estate]--;//Decrement Estates
    #####:  855:				if (supplyCount(estate, state) == 0) {
    #####:  856:					isGameOver(state);
        -:  857:				}
        -:  858:			}
        -:  859:		}
        -:  860:
        -:  861:
    #####:  862:		return 0;
        -:  863:
        -:  864:	case great_hall:
    #####:  865:		caseGreatHall(currentPlayer, state, handPos);
        -:  866:
    #####:  867:		return 0;
        -:  868:
        -:  869:	case minion:
        -:  870:		//+1 action
    #####:  871:		state->numActions++;
        -:  872:
        -:  873:		//discard card from hand
    #####:  874:		discardCard(handPos, currentPlayer, state, 0);
        -:  875:
    #####:  876:		if (choice1)		//+2 coins
        -:  877:		{
    #####:  878:			state->coins = state->coins + 2;
        -:  879:		}
        -:  880:
    #####:  881:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  882:		{
        -:  883:			//discard hand
    #####:  884:			while (numHandCards(state) > 0)
        -:  885:			{
    #####:  886:				discardCard(handPos, currentPlayer, state, 0);
        -:  887:			}
        -:  888:
        -:  889:			//draw 4
    #####:  890:			for (i = 0; i < 4; i++)
        -:  891:			{
    #####:  892:				drawCard(currentPlayer, state);
        -:  893:			}
        -:  894:
        -:  895:			//other players discard hand and redraw if hand size > 4
    #####:  896:			for (i = 0; i < state->numPlayers; i++)
        -:  897:			{
    #####:  898:				if (i != currentPlayer)
        -:  899:				{
    #####:  900:					if (state->handCount[i] > 4)
        -:  901:					{
        -:  902:						//discard hand
    #####:  903:						while (state->handCount[i] > 0)
        -:  904:						{
    #####:  905:							discardCard(handPos, i, state, 0);
        -:  906:						}
        -:  907:
        -:  908:						//draw 4
    #####:  909:						for (j = 0; j < 4; j++)
        -:  910:						{
    #####:  911:							drawCard(i, state);
        -:  912:						}
        -:  913:					}
        -:  914:				}
        -:  915:			}
        -:  916:
        -:  917:		}
    #####:  918:		return 0;
        -:  919:
        -:  920:	case steward:
    #####:  921:		if (choice1 == 1)
        -:  922:		{
        -:  923:			//+2 cards
    #####:  924:			drawCard(currentPlayer, state);
    #####:  925:			drawCard(currentPlayer, state);
        -:  926:		}
    #####:  927:		else if (choice1 == 2)
        -:  928:		{
        -:  929:			//+2 coins
    #####:  930:			state->coins = state->coins + 2;
        -:  931:		}
        -:  932:		else
        -:  933:		{
        -:  934:			//trash 2 cards in hand
    #####:  935:			discardCard(choice2, currentPlayer, state, 1);
    #####:  936:			discardCard(choice3, currentPlayer, state, 1);
        -:  937:		}
        -:  938:
        -:  939:		//discard card from hand
    #####:  940:		discardCard(handPos, currentPlayer, state, 0);
    #####:  941:		return 0;
        -:  942:
        -:  943:	case tribute:
    #####:  944:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####:  945:			if (state->deckCount[nextPlayer] > 0) {
    #####:  946:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  947:				state->deckCount[nextPlayer]--;
        -:  948:			}
    #####:  949:			else if (state->discardCount[nextPlayer] > 0) {
    #####:  950:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  951:				state->discardCount[nextPlayer]--;
        -:  952:			}
        -:  953:			else {
        -:  954:				//No Card to Reveal
        -:  955:				if (DEBUG) {
        -:  956:					printf("No cards to reveal\n");
        -:  957:				}
        -:  958:			}
        -:  959:		}
        -:  960:
        -:  961:		else {
    #####:  962:			if (state->deckCount[nextPlayer] == 0) {
    #####:  963:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####:  964:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  965:					state->deckCount[nextPlayer]++;
    #####:  966:					state->discard[nextPlayer][i] = -1;
    #####:  967:					state->discardCount[nextPlayer]--;
        -:  968:				}
        -:  969:
    #####:  970:				shuffle(nextPlayer, state);//Shuffle the deck
        -:  971:			}
    #####:  972:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  973:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:			state->deckCount[nextPlayer]--;
    #####:  975:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  976:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  977:			state->deckCount[nextPlayer]--;
        -:  978:		}
        -:  979:
    #####:  980:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
    #####:  981:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  982:			state->playedCardCount++;
    #####:  983:			tributeRevealedCards[1] = -1;
        -:  984:		}
        -:  985:
    #####:  986:		for (i = 0; i <= 2; i++) {
    #####:  987:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####:  988:				state->coins += 2;
        -:  989:			}
        -:  990:
    #####:  991:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####:  992:				drawCard(currentPlayer, state);
    #####:  993:				drawCard(currentPlayer, state);
        -:  994:			}
        -:  995:			else {//Action Card
    #####:  996:				state->numActions = state->numActions + 2;
        -:  997:			}
        -:  998:		}
        -:  999:
    #####: 1000:		return 0;
        -: 1001:
        -: 1002:	case ambassador:
    #####: 1003:		j = 0;		//used to check if player has enough cards to discard
        -: 1004:
    #####: 1005:		if (choice2 > 2 || choice2 < 0)
        -: 1006:		{
    #####: 1007:			return -1;
        -: 1008:		}
        -: 1009:
    #####: 1010:		if (choice1 == handPos)
        -: 1011:		{
    #####: 1012:			return -1;
        -: 1013:		}
        -: 1014:
    #####: 1015:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:		{
    #####: 1017:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1018:			{
    #####: 1019:				j++;
        -: 1020:			}
        -: 1021:		}
    #####: 1022:		if (j < choice2)
        -: 1023:		{
    #####: 1024:			return -1;
        -: 1025:		}
        -: 1026:
        -: 1027:		if (DEBUG)
        -: 1028:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1029:
        -: 1030:		//increase supply count for choosen card by amount being discarded
    #####: 1031:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1032:
        -: 1033:		//each other player gains a copy of revealed card
    #####: 1034:		for (i = 0; i < state->numPlayers; i++)
        -: 1035:		{
    #####: 1036:			if (i != currentPlayer)
        -: 1037:			{
    #####: 1038:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1039:			}
        -: 1040:		}
        -: 1041:
        -: 1042:		//discard played card from hand
    #####: 1043:		discardCard(handPos, currentPlayer, state, 0);
        -: 1044:
        -: 1045:		//trash copies of cards returned to supply
    #####: 1046:		for (j = 0; j < choice2; j++)
        -: 1047:		{
    #####: 1048:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1049:			{
    #####: 1050:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1051:				{
    #####: 1052:					discardCard(i, currentPlayer, state, 1);
    #####: 1053:					break;
        -: 1054:				}
        -: 1055:			}
        -: 1056:		}
        -: 1057:
    #####: 1058:		return 0;
        -: 1059:
        -: 1060:	case cutpurse:
        -: 1061:
    #####: 1062:		updateCoins(currentPlayer, state, 2);
    #####: 1063:		for (i = 0; i < state->numPlayers; i++)
        -: 1064:		{
    #####: 1065:			if (i != currentPlayer)
        -: 1066:			{
    #####: 1067:				for (j = 0; j < state->handCount[i]; j++)
        -: 1068:				{
    #####: 1069:					if (state->hand[i][j] == copper)
        -: 1070:					{
    #####: 1071:						discardCard(j, i, state, 0);
    #####: 1072:						break;
        -: 1073:					}
    #####: 1074:					if (j == state->handCount[i])
        -: 1075:					{
    #####: 1076:						for (k = 0; k < state->handCount[i]; k++)
        -: 1077:						{
        -: 1078:							if (DEBUG)
        -: 1079:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1080:						}
    #####: 1081:						break;
        -: 1082:					}
        -: 1083:				}
        -: 1084:
        -: 1085:			}
        -: 1086:
        -: 1087:		}
        -: 1088:
        -: 1089:		//discard played card from hand
    #####: 1090:		discardCard(handPos, currentPlayer, state, 0);
        -: 1091:
    #####: 1092:		return 0;
        -: 1093:
        -: 1094:
        -: 1095:	case embargo:
        -: 1096:		//+2 Coins
    #####: 1097:		state->coins = state->coins + 2;
        -: 1098:
        -: 1099:		//see if selected pile is in play
    #####: 1100:		if (state->supplyCount[choice1] == -1)
        -: 1101:		{
    #####: 1102:			return -1;
        -: 1103:		}
        -: 1104:
        -: 1105:		//add embargo token to selected supply pile
    #####: 1106:		state->embargoTokens[choice1]++;
        -: 1107:
        -: 1108:		//trash card
    #####: 1109:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1110:		return 0;
        -: 1111:
        -: 1112:	case outpost:
        -: 1113:		//set outpost flag
    #####: 1114:		state->outpostPlayed++;
        -: 1115:
        -: 1116:		//discard card
    #####: 1117:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1118:		return 0;
        -: 1119:
        -: 1120:	case salvager:
        -: 1121:		//+1 buy
    #####: 1122:		state->numBuys++;
        -: 1123:
    #####: 1124:		if (choice1)
        -: 1125:		{
        -: 1126:			//gain coins equal to trashed card
    #####: 1127:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1128:			//trash card
    #####: 1129:			discardCard(choice1, currentPlayer, state, 1);
        -: 1130:		}
        -: 1131:
        -: 1132:		//discard card
    #####: 1133:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1134:		return 0;
        -: 1135:
        -: 1136:	case sea_hag:
    #####: 1137:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1138:			if (i != currentPlayer) {
    #####: 1139:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1140:				state->discardCount[i]++;
    #####: 1141:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1142:			}
        -: 1143:		}
    #####: 1144:		return 0;
        -: 1145:
        -: 1146:	case treasure_map:
        -: 1147:		//search hand for another treasure_map
    #####: 1148:		index = -1;
    #####: 1149:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1150:		{
    #####: 1151:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1152:			{
    #####: 1153:				index = i;
    #####: 1154:				break;
        -: 1155:			}
        -: 1156:		}
    #####: 1157:		if (index > -1)
        -: 1158:		{
        -: 1159:			//trash both treasure cards
    #####: 1160:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1161:			discardCard(index, currentPlayer, state, 1);
        -: 1162:
        -: 1163:			//gain 4 Gold cards
    #####: 1164:			for (i = 0; i < 4; i++)
        -: 1165:			{
    #####: 1166:				gainCard(gold, state, 1, currentPlayer);
        -: 1167:			}
        -: 1168:
        -: 1169:			//return success
    #####: 1170:			return 1;
        -: 1171:		}
        -: 1172:
        -: 1173:		//no second treasure_map found in hand
    #####: 1174:		return -1;
        -: 1175:	}
        -: 1176:
    #####: 1177:	return -1;
        -: 1178:}
        -: 1179:
    #####: 1180:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1181:{
        -: 1182:
        -: 1183:	//if card is not trashed, added to Played pile 
    #####: 1184:	if (trashFlag < 1)
        -: 1185:	{
        -: 1186:		//add card to played pile
    #####: 1187:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1188:		state->playedCardCount++;
        -: 1189:	}
        -: 1190:
        -: 1191:	//set played card to -1
    #####: 1192:	state->hand[currentPlayer][handPos] = -1;
        -: 1193:
        -: 1194:	//remove card from player's hand
    #####: 1195:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1196:	{
        -: 1197:		//reduce number of cards in hand
    #####: 1198:		state->handCount[currentPlayer]--;
        -: 1199:	}
    #####: 1200:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1201:	{
        -: 1202:		//reduce number of cards in hand
    #####: 1203:		state->handCount[currentPlayer]--;
        -: 1204:	}
        -: 1205:	else
        -: 1206:	{
        -: 1207:		//replace discarded card with last card in hand
    #####: 1208:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1209:		//set last card to -1
    #####: 1210:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1211:		//reduce number of cards in hand
    #####: 1212:		state->handCount[currentPlayer]--;
        -: 1213:	}
        -: 1214:
    #####: 1215:	return 0;
        -: 1216:}
        -: 1217:
    #####: 1218:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1219:{
        -: 1220:	//Note: supplyPos is enum of choosen card
        -: 1221:
        -: 1222:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1223:	if (supplyCount(supplyPos, state) < 1)
        -: 1224:	{
    #####: 1225:		return -1;
        -: 1226:	}
        -: 1227:
        -: 1228:	//added card for [whoseTurn] current player:
        -: 1229:	// toFlag = 0 : add to discard
        -: 1230:	// toFlag = 1 : add to deck
        -: 1231:	// toFlag = 2 : add to hand
        -: 1232:
    #####: 1233:	if (toFlag == 1)
        -: 1234:	{
    #####: 1235:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1236:		state->deckCount[player]++;
        -: 1237:	}
    #####: 1238:	else if (toFlag == 2)
        -: 1239:	{
    #####: 1240:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1241:		state->handCount[player]++;
        -: 1242:	}
        -: 1243:	else
        -: 1244:	{
    #####: 1245:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1246:		state->discardCount[player]++;
        -: 1247:	}
        -: 1248:
        -: 1249:	//decrease number in supply pile
    #####: 1250:	state->supplyCount[supplyPos]--;
        -: 1251:
    #####: 1252:	return 0;
        -: 1253:}
        -: 1254:
    #####: 1255:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1256:{
        -: 1257:	int i;
        -: 1258:
        -: 1259:	//reset coin count
    #####: 1260:	state->coins = 0;
        -: 1261:
        -: 1262:	//add coins for each Treasure card in player's hand
    #####: 1263:	for (i = 0; i < state->handCount[player]; i++)
        -: 1264:	{
    #####: 1265:		if (state->hand[player][i] == copper)
        -: 1266:		{
    #####: 1267:			state->coins += 1;
        -: 1268:		}
    #####: 1269:		else if (state->hand[player][i] == silver)
        -: 1270:		{
    #####: 1271:			state->coins += 2;
        -: 1272:		}
    #####: 1273:		else if (state->hand[player][i] == gold)
        -: 1274:		{
    #####: 1275:			state->coins += 3;
        -: 1276:		}
        -: 1277:	}
        -: 1278:
        -: 1279:	//add bonus
    #####: 1280:	state->coins += bonus;
        -: 1281:
    #####: 1282:	return 0;
        -: 1283:}
        -: 1284:
        -: 1285://Newly added function to support Smithy case statement for assignment 2
    #####: 1286:void caseSmithy(int currentPlayer, int handPos, struct gameState *state) {
        -: 1287:	int i;
    #####: 1288:	for (i = 0; i < 3; i++)
        -: 1289:	{
    #####: 1290:		drawCard(currentPlayer, state);
        -: 1291:	}
        -: 1292:
        -: 1293:	//discard card from hand
    #####: 1294:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1295:}
        -: 1296:
        -: 1297://Newly added function to support Adventurer case statement for assignment 2
    #####: 1298:void caseAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[MAX_HAND], int z) {
        -: 1299:	int cardDrawn;
    #####: 1300:	while (drawntreasure<2) {
        -: 1301:
        -: 1302:
    #####: 1303:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1304:			shuffle(currentPlayer, state);
        -: 1305:		}
    #####: 1306:		drawCard(currentPlayer, state);
    #####: 1307:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####: 1308:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1309:			drawntreasure++;
        -: 1310:		else {
    #####: 1311:			temphand[z] = cardDrawn;
    #####: 1312:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1313:			z++;
        -: 1314:		}
        -: 1315:	}
    #####: 1316:	while (z - 1 >= 0) {
    #####: 1317:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1318:		z = z - 1;
        -: 1319:	}
    #####: 1320:}
        -: 1321:
        -: 1322://Newly added function to support Village case statement for assignment 2
    #####: 1323:void caseVillage(int currentPlayer, struct gameState *state, int handPos) {
        -: 1324:
        -: 1325:	//+1 Card
    #####: 1326:	drawCard(currentPlayer, state);
        -: 1327:
        -: 1328:	//+2 Actions
    #####: 1329:	state->numActions = state->numActions + 2;
        -: 1330:
        -: 1331:	//discard played card from hand
    #####: 1332:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1333:}
        -: 1334:
        -: 1335://Newly added function to support Great Hall case statement for assignment 2
    #####: 1336:void caseGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -: 1337:	//+1 Card
    #####: 1338:	drawCard(currentPlayer, state);
        -: 1339:
        -: 1340:	//+1 Actions
    #####: 1341:	state->numActions++;
        -: 1342:
        -: 1343:	//discard card from hand
    #####: 1344:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1345:}
        -: 1346:
        -: 1347://Newly added function to support Council Room case statement for assignment 2
    #####: 1348:void caseCouncilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -: 1349:	//+4 Cards
        -: 1350:
        -: 1351:	int i;
    #####: 1352:	for (i = 0; i < 4; i++)
        -: 1353:	{
    #####: 1354:		drawCard(currentPlayer, state);
        -: 1355:	}
        -: 1356:
        -: 1357:	//+1 Buy
    #####: 1358:	state->numBuys++;
        -: 1359:
        -: 1360:	//Each other player draws a card
    #####: 1361:	for (i = 0; i < state->numPlayers; i++)
        -: 1362:	{
    #####: 1363:		if (i != currentPlayer)
        -: 1364:		{
    #####: 1365:			drawCard(i, state);
        -: 1366:		}
        -: 1367:	}
        -: 1368:
        -: 1369:	//put played card in played card pile
    #####: 1370:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1371:}
        -: 1372://end of dominion.c
