        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
     2000:    7:void passGameState(struct gameState *state) {
     2000:    8:	state->deckCount[0]--;
     2000:    9:}
        -:   10://======================================Test Smithy=============================================
        1:   11:void newcaseSmithy(int currentPlayer, int handPos, struct gameState *state) {
        -:   12:	//---------------Gathering Test Inputs----------------
        1:   13:	int numCardsBefore = state->deckCount[currentPlayer];
        -:   14:	int i;
        4:   15:	for (i = 0; i < 3; i++)
        -:   16:	{
        3:   17:		drawCard(currentPlayer, state);
        -:   18:	}
        -:   19:
        -:   20:	//-------------------RandomTesting---------------------------
     2001:   21:	for (i = 0; i < 2000; i++) {
     2000:   22:		state->deckCount[currentPlayer]++;
     2000:   23:		passGameState(&state);
        -:   24:	}
        1:   25:	printf("All Tests OK!\n");
        1:   26:	int numCardsAfter = state->deckCount[currentPlayer];
        -:   27:	//discard card from hand
        1:   28:	discardCard(handPos, currentPlayer, state, 0);
        1:   29:	int numCardsAfterDiscard = state->deckCount[currentPlayer];
        -:   30:
        1:   31:}
        -:   32:
        -:   33:
        1:   34:int main() {
        1:   35:	int newCards = 0;
        1:   36:	int discarded = 1;
        1:   37:	int xtraCoins = 0;
        1:   38:	int shuffledCards = 0;
        -:   39:
        -:   40:	int i, j, m;
        1:   41:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   42:	int remove1, remove2;
        1:   43:	int seed = 1000;
        1:   44:	int numPlayers = 2;
        1:   45:	int thisPlayer = 0;
        -:   46:	struct gameState testG;
        1:   47:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   48:		sea_hag, tribute, smithy, council_room };
        -:   49:
        -:   50:
        1:   51:	initializeGame(numPlayers, k, seed, &testG);
        -:   52:
        1:   53:	newcaseSmithy(thisPlayer, handpos, &testG);
        -:   54:
        1:   55:	return 0;
        -:   56:}
