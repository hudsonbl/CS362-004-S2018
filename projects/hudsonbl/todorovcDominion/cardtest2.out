------------Testing Smithy-----------------
Deck before card draw 5 compared to after but before smithy card is discarded 3
Deck after discard 3
File 'cardtest2.c'
Lines executed:82.86% of 35
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9://======================================Test Adventurer=============================================
        1:   10:void caseAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[MAX_HAND], int z) {
        -:   11:
        -:   12:	//--------------------------Input Gathering-------------------------------
        1:   13:	int numCardsBefore = state->deckCount[currentPlayer];
        -:   14:	int cardDrawn;
        4:   15:	while (drawntreasure<2) {
        -:   16:
        -:   17:
        2:   18:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:   19:			shuffle(currentPlayer, state);
        -:   20:		}
        2:   21:		drawCard(currentPlayer, state);
        2:   22:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        2:   23:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:   24:			drawntreasure++;
        -:   25:		else {
    #####:   26:			temphand[z] = cardDrawn;
    #####:   27:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   28:			z++;
        -:   29:		}
        -:   30:	}
        -:   31:	//-----------------------Input Gathering--------------------
        1:   32:	int numCardsAfter = state->deckCount[currentPlayer];
        -:   33:
        -:   34:
        2:   35:	while (z - 1 >= 0) {
    #####:   36:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:   37:		z = z - 1;
        -:   38:	}
        -:   39:	//------------------------Input Gathering------------------
        -:   40:
        1:   41:	int numCardsAfterDiscard = state->deckCount[currentPlayer];
        1:   42:	printf("------------Testing Smithy-----------------\n");
        1:   43:	printf("Deck before card draw %d compared to after but before smithy card is discarded %d\n", numCardsBefore, numCardsAfter);
        1:   44:	printf("Deck after discard %d\n", numCardsAfterDiscard);
        -:   45:
        1:   46:}
        -:   47:
        -:   48:
        1:   49:int main() {
        1:   50:	int newCards = 0;
        1:   51:	int discarded = 1;
        1:   52:	int xtraCoins = 0;
        1:   53:	int shuffledCards = 0;
        1:   54:	int temphand = 0;
        -:   55:	int i, j, m;
        1:   56:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   57:	int remove1, remove2;
        1:   58:	int seed = 1000;
        1:   59:	int numPlayers = 2;
        1:   60:	int thisPlayer = 0;
        -:   61:	struct gameState testG;
        1:   62:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   63:		sea_hag, tribute, smithy, council_room };
        -:   64:
        -:   65:
        1:   66:	initializeGame(numPlayers, k, seed, &testG);
        -:   67:
        1:   68:	caseAdventurer(0, &testG, 0, temphand, 0);
        -:   69:
        1:   70:	return 0;
        -:   71:}
