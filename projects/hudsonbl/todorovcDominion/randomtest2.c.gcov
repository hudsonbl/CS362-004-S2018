        -:    0:Source:randomtest2.c
        -:    0:Graph:randomtest2.gcno
        -:    0:Data:randomtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
     2000:    7:void passGameState(struct gameState *state) {
     2000:    8:	state->numBuys--;
     2000:    9:}
        -:   10:
        -:   11://======================================Test Council Room=============================================
        -:   12:
        1:   13:void newcaseCouncilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -:   14:	//+4 Cards
        -:   15:	//--------------Input Gathering------------------
        1:   16:	int numCardsBefore = state->deckCount[currentPlayer];
        -:   17:	int i;
        5:   18:	for (i = 0; i < 4; i++)
        -:   19:	{
        4:   20:		drawCard(currentPlayer, state);
        -:   21:	}
        1:   22:	int numCardsAfter = state->deckCount[currentPlayer];
        -:   23:	//+1 Buy
        1:   24:	int numberBuysBefore = state->numBuys;
        1:   25:	state->numBuys++;
        1:   26:	int numberBuysAfter = state->numBuys;
        -:   27:	//-------------------RandomTesting---------------------------
     2001:   28:	for (i = 0; i < 2000; i++) {
     2000:   29:		state->numBuys++;
     2000:   30:		passGameState(&state);
        -:   31:	}
        -:   32:
        1:   33:	printf("ALL TEST OK\n");
        1:   34:	printf("------------Testing Council Room Buys-----------------\n");
        1:   35:	printf("Room Buys before %d compared to after %d\n", numberBuysBefore, numberBuysAfter);
        -:   36:
        -:   37:	//Each other player draws a card
        3:   38:	for (i = 0; i < state->numPlayers; i++)
        -:   39:	{
        2:   40:		if (i != currentPlayer)
        -:   41:		{
        1:   42:			drawCard(i, state);
        -:   43:		}
        -:   44:	}
        -:   45:
        -:   46:	//put played card in played card pile
        1:   47:	discardCard(handPos, currentPlayer, state, 0);
        1:   48:	int numCardsAfterDiscard = state->deckCount[currentPlayer];
        1:   49:	printf("------------Testing Council Room-----------------\n");
        1:   50:	printf("Deck before card draw %d compared to after but before council card is discarded %d\n", numCardsBefore, numCardsAfter);
        1:   51:	printf("Deck after discard %d\n", numCardsAfterDiscard);
        1:   52:}
        -:   53:
        1:   54:int main() {
        1:   55:	int newCards = 0;
        1:   56:	int discarded = 1;
        1:   57:	int xtraCoins = 0;
        1:   58:	int shuffledCards = 0;
        -:   59:
        -:   60:	int i, j, m;
        1:   61:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   62:	int remove1, remove2;
        1:   63:	int seed = 1000;
        1:   64:	int numPlayers = 2;
        1:   65:	int thisPlayer = 0;
        -:   66:	struct gameState testG;
        1:   67:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   68:		sea_hag, tribute, smithy, council_room };
        -:   69:
        -:   70:
        1:   71:	initializeGame(numPlayers, k, seed, &testG);
        -:   72:
        1:   73:	newcaseCouncilRoom(0, &testG, 0);
        -:   74:
        1:   75:	return 0;
        -:   76:}
